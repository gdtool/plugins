// WARNING! This file contains some subset of JS that is not supported by type inference.
// You can try checking 'Transpile to ES5' checkbox if you want the types to be inferred
'use strict';
!function(factory) {
  if ("function" == typeof require && "object" == typeof exports && "object" == typeof module) {
    module.exports = factory;
  } else {
    if ("function" == typeof define) {
      if (!define.amd) {
        define(["jquery"], factory);
      }
    } else {
      window.editormd = factory();
    }
  }
}(function() {
  var $ = "undefined" != typeof jQuery ? jQuery : Zepto;
  if (void 0 !== $) {
    /**
     * @param {?} options
     * @param {?} val
     * @return {?}
     */
    var self = function(options, val) {
      return new self.fn.init(options, val);
    };
    var _takingTooLongTimeout;
    var paintNodesTimeout;
    self.title = self.$name = "Editor.md";
    /** @type {string} */
    self.version = "1.5.0";
    /** @type {string} */
    self.homePage = "https://pandao.github.io/editor.md/";
    /** @type {string} */
    self.classPrefix = "editormd-";
    self.toolbarModes = {
      full : ["undo", "redo", "|", "bold", "del", "italic", "quote", "ucwords", "uppercase", "lowercase", "|", "h1", "h2", "h3", "h4", "h5", "h6", "|", "list-ul", "list-ol", "hr", "|", "link", "reference-link", "image", "code", "preformatted-text", "code-block", "table", "datetime", "emoji", "html-entities", "pagebreak", "|", "goto-line", "watch", "preview", "fullscreen", "clear", "search", "|", "help", "info"],
      simple : ["undo", "redo", "|", "bold", "del", "italic", "quote", "uppercase", "lowercase", "|", "h1", "h2", "h3", "h4", "h5", "h6", "|", "list-ul", "list-ol", "hr", "|", "watch", "preview", "fullscreen", "|", "help", "info"],
      mini : ["undo", "redo", "|", "watch", "preview", "|", "help", "info"]
    };
    self.defaults = {
      mode : "gfm",
      name : "",
      value : "",
      theme : "",
      editorTheme : "default",
      previewTheme : "",
      markdown : "",
      appendMarkdown : "",
      width : "100%",
      height : "100%",
      path : "./lib/",
      pluginPath : "",
      delay : 300,
      autoLoadModules : true,
      watch : true,
      placeholder : "Enjoy Markdown! coding now...",
      gotoLine : true,
      codeFold : false,
      autoHeight : false,
      minHeight : "150px",
      maxHeight : "none",
      autoFocus : true,
      autoCloseTags : true,
      searchReplace : true,
      syncScrolling : true,
      readOnly : false,
      tabSize : 4,
      indentUnit : 4,
      lineNumbers : true,
      lineWrapping : true,
      autoCloseBrackets : true,
      showTrailingSpace : true,
      matchBrackets : true,
      indentWithTabs : true,
      styleSelectedText : true,
      matchWordHighlight : true,
      styleActiveLine : true,
      dialogLockScreen : true,
      dialogShowMask : true,
      dialogDraggable : true,
      dialogMaskBgColor : "#fff",
      dialogMaskOpacity : .1,
      fontSize : "13px",
      saveHTMLToTextarea : false,
      disabledKeyMaps : [],
      onload : function() {
      },
      onresize : function() {
      },
      onchange : function() {
      },
      onwatch : null,
      onunwatch : null,
      onpreviewing : function() {
      },
      onpreviewed : function() {
      },
      onfullscreen : function() {
      },
      onfullscreenExit : function() {
      },
      onscroll : function() {
      },
      onpreviewscroll : function() {
      },
      imageUpload : false,
      imageFormats : ["jpg", "jpeg", "gif", "png", "bmp", "webp"],
      imageUploadURL : "",
      crossDomainUpload : false,
      uploadCallbackURL : "",
      toc : true,
      tocm : false,
      tocTitle : "",
      tocDropdown : false,
      tocContainer : "",
      tocStartLevel : 1,
      htmlDecode : false,
      pageBreak : true,
      atLink : true,
      emailLink : true,
      taskList : false,
      emoji : false,
      tex : false,
      flowChart : false,
      sequenceDiagram : false,
      previewCodeHighlight : true,
      toolbar : true,
      toolbarAutoFixed : true,
      toolbarIcons : "full",
      toolbarTitles : {},
      toolbarHandlers : {
        ucwords : function() {
          return self.toolbarHandlers.ucwords;
        },
        lowercase : function() {
          return self.toolbarHandlers.lowercase;
        }
      },
      toolbarCustomIcons : {
        lowercase : '<a href="javascript:;" title="Lowercase" unselectable="on"><i class="fa" name="lowercase" style="font-size:24px;margin-top: -10px;">a</i></a>',
        ucwords : '<a href="javascript:;" title="ucwords" unselectable="on"><i class="fa" name="ucwords" style="font-size:20px;margin-top: -3px;">Aa</i></a>'
      },
      toolbarIconsClass : {
        undo : "fa-undo",
        redo : "fa-repeat",
        bold : "fa-bold",
        del : "fa-strikethrough",
        italic : "fa-italic",
        quote : "fa-quote-left",
        uppercase : "fa-font",
        h1 : self.classPrefix + "bold",
        h2 : self.classPrefix + "bold",
        h3 : self.classPrefix + "bold",
        h4 : self.classPrefix + "bold",
        h5 : self.classPrefix + "bold",
        h6 : self.classPrefix + "bold",
        "list-ul" : "fa-list-ul",
        "list-ol" : "fa-list-ol",
        hr : "fa-minus",
        link : "fa-link",
        "reference-link" : "fa-anchor",
        image : "fa-picture-o",
        code : "fa-code",
        "preformatted-text" : "fa-file-code-o",
        "code-block" : "fa-file-code-o",
        table : "fa-table",
        datetime : "fa-clock-o",
        emoji : "fa-smile-o",
        "html-entities" : "fa-copyright",
        pagebreak : "fa-newspaper-o",
        "goto-line" : "fa-terminal",
        watch : "fa-eye-slash",
        unwatch : "fa-eye",
        preview : "fa-desktop",
        search : "fa-search",
        fullscreen : "fa-arrows-alt",
        clear : "fa-eraser",
        help : "fa-question-circle",
        info : "fa-info-circle"
      },
      toolbarIconTexts : {},
      lang : {
        name : "zh-cn",
        description : "\u5f00\u6e90\u5728\u7ebfMarkdown\u7f16\u8f91\u5668<br/>Open source online Markdown editor.",
        tocTitle : "\u76ee\u5f55",
        toolbar : {
          undo : "\u64a4\u9500\uff08Ctrl+Z\uff09",
          redo : "\u91cd\u505a\uff08Ctrl+Y\uff09",
          bold : "\u7c97\u4f53",
          del : "\u5220\u9664\u7ebf",
          italic : "\u659c\u4f53",
          quote : "\u5f15\u7528",
          ucwords : "\u5c06\u6bcf\u4e2a\u5355\u8bcd\u9996\u5b57\u6bcd\u8f6c\u6210\u5927\u5199",
          uppercase : "\u5c06\u6240\u9009\u8f6c\u6362\u6210\u5927\u5199",
          lowercase : "\u5c06\u6240\u9009\u8f6c\u6362\u6210\u5c0f\u5199",
          h1 : "\u6807\u98981",
          h2 : "\u6807\u98982",
          h3 : "\u6807\u98983",
          h4 : "\u6807\u98984",
          h5 : "\u6807\u98985",
          h6 : "\u6807\u98986",
          "list-ul" : "\u65e0\u5e8f\u5217\u8868",
          "list-ol" : "\u6709\u5e8f\u5217\u8868",
          hr : "\u6a2a\u7ebf",
          link : "\u94fe\u63a5",
          "reference-link" : "\u5f15\u7528\u94fe\u63a5",
          image : "\u6dfb\u52a0\u56fe\u7247",
          code : "\u884c\u5185\u4ee3\u7801",
          "preformatted-text" : "\u9884\u683c\u5f0f\u6587\u672c / \u4ee3\u7801\u5757\uff08\u7f29\u8fdb\u98ce\u683c\uff09",
          "code-block" : "\u4ee3\u7801\u5757\uff08\u591a\u8bed\u8a00\u98ce\u683c\uff09",
          table : "\u6dfb\u52a0\u8868\u683c",
          datetime : "\u65e5\u671f\u65f6\u95f4",
          emoji : "Emoji\u8868\u60c5",
          "html-entities" : "HTML\u5b9e\u4f53\u5b57\u7b26",
          pagebreak : "\u63d2\u5165\u5206\u9875\u7b26",
          "goto-line" : "\u8df3\u8f6c\u5230\u884c",
          watch : "\u5173\u95ed\u5b9e\u65f6\u9884\u89c8",
          unwatch : "\u5f00\u542f\u5b9e\u65f6\u9884\u89c8",
          preview : "\u5168\u7a97\u53e3\u9884\u89c8HTML\uff08\u6309 Shift + ESC\u8fd8\u539f\uff09",
          fullscreen : "\u5168\u5c4f\uff08\u6309ESC\u8fd8\u539f\uff09",
          clear : "\u6e05\u7a7a",
          search : "\u641c\u7d22",
          help : "\u4f7f\u7528\u5e2e\u52a9",
          info : "\u5173\u4e8e" + self.title
        },
        buttons : {
          enter : "\u786e\u5b9a",
          cancel : "\u53d6\u6d88",
          close : "\u5173\u95ed"
        },
        dialog : {
          link : {
            title : "\u6dfb\u52a0\u94fe\u63a5",
            url : "\u94fe\u63a5\u5730\u5740",
            urlTitle : "\u94fe\u63a5\u6807\u9898",
            urlEmpty : "\u9519\u8bef\uff1a\u8bf7\u586b\u5199\u94fe\u63a5\u5730\u5740\u3002"
          },
          referenceLink : {
            title : "\u6dfb\u52a0\u5f15\u7528\u94fe\u63a5",
            name : "\u5f15\u7528\u540d\u79f0",
            url : "\u94fe\u63a5\u5730\u5740",
            urlId : "\u94fe\u63a5ID",
            urlTitle : "\u94fe\u63a5\u6807\u9898",
            nameEmpty : "\u9519\u8bef\uff1a\u5f15\u7528\u94fe\u63a5\u7684\u540d\u79f0\u4e0d\u80fd\u4e3a\u7a7a\u3002",
            idEmpty : "\u9519\u8bef\uff1a\u8bf7\u586b\u5199\u5f15\u7528\u94fe\u63a5\u7684ID\u3002",
            urlEmpty : "\u9519\u8bef\uff1a\u8bf7\u586b\u5199\u5f15\u7528\u94fe\u63a5\u7684URL\u5730\u5740\u3002"
          },
          image : {
            title : "\u6dfb\u52a0\u56fe\u7247",
            url : "\u56fe\u7247\u5730\u5740",
            link : "\u56fe\u7247\u94fe\u63a5",
            alt : "\u56fe\u7247\u63cf\u8ff0",
            uploadButton : "\u672c\u5730\u4e0a\u4f20",
            imageURLEmpty : "\u9519\u8bef\uff1a\u56fe\u7247\u5730\u5740\u4e0d\u80fd\u4e3a\u7a7a\u3002",
            uploadFileEmpty : "\u9519\u8bef\uff1a\u4e0a\u4f20\u7684\u56fe\u7247\u4e0d\u80fd\u4e3a\u7a7a\u3002",
            formatNotAllowed : "\u9519\u8bef\uff1a\u53ea\u5141\u8bb8\u4e0a\u4f20\u56fe\u7247\u6587\u4ef6\uff0c\u5141\u8bb8\u4e0a\u4f20\u7684\u56fe\u7247\u6587\u4ef6\u683c\u5f0f\u6709\uff1a"
          },
          preformattedText : {
            title : "\u6dfb\u52a0\u9884\u683c\u5f0f\u6587\u672c\u6216\u4ee3\u7801\u5757",
            emptyAlert : "\u9519\u8bef\uff1a\u8bf7\u586b\u5199\u9884\u683c\u5f0f\u6587\u672c\u6216\u4ee3\u7801\u7684\u5185\u5bb9\u3002"
          },
          codeBlock : {
            title : "\u6dfb\u52a0\u4ee3\u7801\u5757",
            selectLabel : "\u4ee3\u7801\u8bed\u8a00\uff1a",
            selectDefaultText : "\u8bf7\u9009\u62e9\u4ee3\u7801\u8bed\u8a00",
            otherLanguage : "\u5176\u4ed6\u8bed\u8a00",
            unselectedLanguageAlert : "\u9519\u8bef\uff1a\u8bf7\u9009\u62e9\u4ee3\u7801\u6240\u5c5e\u7684\u8bed\u8a00\u7c7b\u578b\u3002",
            codeEmptyAlert : "\u9519\u8bef\uff1a\u8bf7\u586b\u5199\u4ee3\u7801\u5185\u5bb9\u3002"
          },
          htmlEntities : {
            title : "HTML \u5b9e\u4f53\u5b57\u7b26"
          },
          help : {
            title : "\u4f7f\u7528\u5e2e\u52a9"
          }
        }
      }
    };
    self.classNames = {
      tex : self.classPrefix + "tex"
    };
    /** @type {number} */
    self.dialogZindex = 99999;
    /** @type {null} */
    self.$katex = null;
    /** @type {null} */
    self.$marked = null;
    /** @type {null} */
    self.$CodeMirror = null;
    /** @type {null} */
    self.$prettyPrint = null;
    self.prototype = self.fn = {
      state : {
        watching : false,
        loaded : false,
        preview : false,
        fullscreen : false
      },
      init : function(v, opts) {
        opts = opts || {};
        if ("object" == typeof v) {
          opts = v;
        }
        var _this = this;
        var id = this.classPrefix = self.classPrefix;
        var options = this.settings = $.extend(true, self.defaults, opts);
        v = "object" == typeof v ? options.id : v;
        var editor = this.editor = $("#" + v);
        this.id = v;
        this.lang = options.lang;
        var question = this.classNames = {
          textarea : {
            html : id + "html-textarea",
            markdown : id + "markdown-textarea"
          }
        };
        options.pluginPath = "" === options.pluginPath ? options.path + "../plugins/" : options.pluginPath;
        this.state.watching = !!options.watch;
        if (!editor.hasClass("editormd")) {
          editor.addClass("editormd");
        }
        editor.css({
          width : "number" == typeof options.width ? options.width + "px" : options.width,
          height : "number" == typeof options.height ? options.height + "px" : options.height
        });
        if (options.autoHeight) {
          editor.css({
            height : "auto",
            minHeight : options.minHeight
          });
        }
        var t = this.markdownTextarea = editor.children("textarea");
        if (t.length < 1) {
          editor.append("<textarea></textarea>");
          t = this.markdownTextarea = editor.children("textarea");
        }
        t.addClass(question.textarea.markdown).attr("placeholder", options.placeholder);
        if (!(void 0 !== t.attr("name") && "" !== t.attr("name"))) {
          t.attr("name", "" !== options.name ? options.name : v + "-markdown-doc");
        }
        var slider_html = [options.readOnly ? "" : '<a href="javascript:;" class="fa fa-close ' + id + 'preview-close-btn"></a>', options.saveHTMLToTextarea ? '<textarea class="' + question.textarea.html + '" name="' + v + '-html-code"></textarea>' : "", '<div class="' + id + 'preview"><div class="markdown-body ' + id + 'preview-container"></div></div>', '<div class="' + id + 'container-mask" style="display:block;"></div>', '<div class="' + id + 'mask"></div>'].join("\n");
        return editor.append(slider_html).addClass(id + "vertical"), "" !== options.theme && editor.addClass(id + "theme-" + options.theme), this.mask = editor.children("." + id + "mask"), this.containerMask = editor.children("." + id + "container-mask"), "" !== options.markdown && t.val(options.markdown), "" !== options.appendMarkdown && t.val(t.val() + options.appendMarkdown), this.htmlTextarea = editor.children("." + question.textarea.html), this.preview = editor.children("." + id + "preview"), 
        this.previewContainer = this.preview.children("." + id + "preview-container"), "" !== options.previewTheme && this.preview.addClass(id + "preview-theme-" + options.previewTheme), "function" == typeof define && define.amd && ("undefined" != typeof katex && (self.$katex = katex), options.searchReplace && !options.readOnly && (self.loadCSS(options.path + "codemirror/addon/dialog/dialog"), self.loadCSS(options.path + "codemirror/addon/search/matchesonscrollbar"))), "function" == typeof define && 
        define.amd || !options.autoLoadModules ? ("undefined" != typeof CodeMirror && (self.$CodeMirror = CodeMirror), "undefined" != typeof marked && (self.$marked = marked), this.setCodeMirror().setToolbar().loadedDisplay()) : this.loadQueues(), this;
      },
      loadQueues : function() {
        var win = this;
        var options = this.settings;
        var url = options.path;
        url = 'https://cdn.jsdelivr.net/gh/gdtool/plugins/plugins'+'/gmchina_xiuno_editormd/editormd/lib/';
        //alert(url);
        var loadEnvironment = function() {
          if (self.isIE8) {
            win.loadedDisplay();
          } else {
            self.loadScript(url + "xss.min");
            if (options.flowChart || options.sequenceDiagram) {
              self.loadScript(url + "raphael.min", function() {
                self.loadScript(url + "underscore.min", function() {
                  if (!options.flowChart && options.sequenceDiagram) {
                    self.loadScript(url + "sequence-diagram.min", function() {
                      win.loadedDisplay();
                    });
                  } else {
                    if (options.flowChart && !options.sequenceDiagram) {
                      self.loadScript(url + "flowchart.min", function() {
                        self.loadScript(url + "jquery.flowchart.min", function() {
                          win.loadedDisplay();
                        });
                      });
                    } else {
                      if (options.flowChart && options.sequenceDiagram) {
                        self.loadScript(url + "flowchart.min", function() {
                          self.loadScript(url + "jquery.flowchart.min", function() {
                            self.loadScript(url + "sequence-diagram.min", function() {
                              win.loadedDisplay();
                            });
                          });
                        });
                      }
                    }
                  }
                });
              });
            } else {
              win.loadedDisplay();
            }
          }
        };
        return self.loadCSS(url + "codemirror/codemirror.min"), options.searchReplace && !options.readOnly && (self.loadCSS(url + "codemirror/addon/dialog/dialog"), self.loadCSS(url + "codemirror/addon/search/matchesonscrollbar")), options.codeFold && self.loadCSS(url + "codemirror/addon/fold/foldgutter"), self.loadScript(url + "codemirror/codemirror.min", function() {
          self.$CodeMirror = CodeMirror;
          self.loadScript(url + "codemirror/modes.min", function() {
            self.loadScript(url + "codemirror/addons.min", function() {
              if (win.setCodeMirror(), "gfm" !== options.mode && "markdown" !== options.mode) {
                return win.loadedDisplay(), false;
              }
              win.setToolbar();
              self.loadScript(url + "marked.min", function() {
                self.$marked = marked;
                if (options.previewCodeHighlight) {
                  self.loadScript(url + "prettify.min", function() {
                    loadEnvironment();
                  });
                } else {
                  loadEnvironment();
                }
              });
            });
          });
        }), this;
      },
      setTheme : function(value) {
        var e = this.editor;
        var t = this.settings.theme;
        var prefix = this.classPrefix + "theme-";
        return e.removeClass(prefix + t).addClass(prefix + value), this.settings.theme = value, this;
      },
      setEditorTheme : function(theme) {
        var options = this.settings;
        return options.editorTheme = theme, "default" !== theme && self.loadCSS(options.path + "codemirror/theme/" + options.editorTheme), this.cm.setOption("theme", theme), this;
      },
      setCodeMirrorTheme : function(settings) {
        return this.setEditorTheme(settings), this;
      },
      setPreviewTheme : function(animation) {
        var buffer = this.preview;
        var i = this.settings.previewTheme;
        var prefix = this.classPrefix + "preview-theme-";
        return buffer.removeClass(prefix + i).addClass(prefix + animation), this.settings.previewTheme = animation, this;
      },
      setCodeMirror : function() {
        var config = this.settings;
        var ed = this.editor;
        if ("default" !== config.editorTheme) {
          self.loadCSS(config.path + "codemirror/theme/" + config.editorTheme);
        }
        var options = {
          mode : config.mode,
          theme : config.editorTheme,
          tabSize : config.tabSize,
          dragDrop : false,
          autofocus : config.autoFocus,
          autoCloseTags : config.autoCloseTags,
          readOnly : !!config.readOnly && "nocursor",
          indentUnit : config.indentUnit,
          lineNumbers : config.lineNumbers,
          lineWrapping : config.lineWrapping,
          extraKeys : {
            "Ctrl-Q" : function(cm) {
              cm.foldCode(cm.getCursor());
            }
          },
          foldGutter : config.codeFold,
          gutters : ["CodeMirror-linenumbers", "CodeMirror-foldgutter"],
          matchBrackets : config.matchBrackets,
          indentWithTabs : config.indentWithTabs,
          styleActiveLine : config.styleActiveLine,
          styleSelectedText : config.styleSelectedText,
          autoCloseBrackets : config.autoCloseBrackets,
          showTrailingSpace : config.showTrailingSpace,
          highlightSelectionMatches : !!config.matchWordHighlight && {
            showToken : "onselected" !== config.matchWordHighlight && /\w/
          }
        };
        return this.codeEditor = this.cm = self.$CodeMirror.fromTextArea(this.markdownTextarea[0], options), this.codeMirror = this.cmElement = ed.children(".CodeMirror"), "" !== config.value && this.cm.setValue(config.value), this.codeMirror.css({
          fontSize : config.fontSize,
          width : config.watch ? "50%" : "100%"
        }), config.autoHeight && (this.codeMirror.css({
          height : "auto",
          minHeight : config.minHeight,
          maxHeight : config.maxHeight
        }), this.codeMirror.find(".CodeMirror-gutters").css({
          minHeight : config.minHeight
        }), this.codeMirror.find(".CodeMirror-scroll").css({
          minHeight : config.minHeight,
          maxHeight : config.maxHeight
        }), this.cm.setOption("viewportMargin", 1 / 0)), config.lineNumbers || this.codeMirror.find(".CodeMirror-gutters").css("border-right", "none"), this;
      },
      getCodeMirrorOption : function(value) {
        return this.cm.getOption(value);
      },
      setCodeMirrorOption : function(key, callback) {
        return this.cm.setOption(key, callback), this;
      },
      addKeyMap : function(keyMap, callback) {
        return this.cm.addKeyMap(keyMap, callback), this;
      },
      removeKeyMap : function(keyMap) {
        return this.cm.removeKeyMap(keyMap), this;
      },
      gotoLine : function(id) {
        var options = this.settings;
        if (!options.gotoLine) {
          return this;
        }
        var cm = this.cm;
        var ed = this.editor;
        var fname = cm.lineCount();
        var elem = this.preview;
        if ("string" == typeof id && ("last" === id && (id = fname), "first" === id && (id = 1)), "number" != typeof id) {
          return alert("Error: The line number must be an integer."), this;
        }
        if ((id = parseInt(id) - 1) > fname) {
          return alert("Error: The line number range 1-" + fname), this;
        }
        cm.setCursor({
          line : id,
          ch : 0
        });
        var scrollInfo;
        var hTotal = cm.getScrollInfo().clientHeight;
        var pos = cm.charCoords({
          line : id,
          ch : 0
        }, "local");
        if (cm.scrollTo(null, (pos.top + pos.bottom - hTotal) / 2), options.watch) {
          var elem = this.codeMirror.find(".CodeMirror-scroll")[0];
          var scroll_adjust = $(elem).height();
          var y = elem.scrollTop;
          var ratio = y / elem.scrollHeight;
          if (0 === y) {
            elem.scrollTop(0);
          } else {
            if (y + scroll_adjust >= elem.scrollHeight - 16) {
              elem.scrollTop(elem[0].scrollHeight);
            } else {
              elem.scrollTop(elem[0].scrollHeight * ratio);
            }
          }
        }
        return cm.focus(), this;
      },
      extend : function() {
        return void 0 !== arguments[1] && ("function" == typeof arguments[1] && (arguments[1] = $.proxy(arguments[1], this)), this[arguments[0]] = arguments[1]), "object" == typeof arguments[0] && void 0 === arguments[0].length && $.extend(true, this, arguments[0]), this;
      },
      set : function(key_or_object, value) {
        return void 0 !== value && "function" == typeof value && (value = $.proxy(value, this)), this[key_or_object] = value, this;
      },
      config : function(val, data) {
        var options = this.settings;
        return "object" == typeof val && (options = $.extend(true, options, val)), "string" == typeof val && (options[val] = data), this.settings = options, this.recreate(), this;
      },
      on : function(event, callback) {
        var options = this.settings;
        return void 0 !== options["on" + event] && (options["on" + event] = $.proxy(callback, this)), this;
      },
      off : function(type) {
        var Mock = this.settings;
        return void 0 !== Mock["on" + type] && (Mock["on" + type] = function() {
        }), this;
      },
      showToolbar : function(container) {
        var options = this.settings;
        return options.readOnly ? this : (options.toolbar && (this.toolbar.length < 1 || "" === this.toolbar.find("." + this.classPrefix + "menu").html()) && this.setToolbar(), options.toolbar = true, this.toolbar.show(), this.resize(), $.proxy(container || function() {
        }, this)(), this);
      },
      hideToolbar : function(fn) {
        var settings;
        return this.settings.toolbar = false, this.toolbar.hide(), this.resize(), $.proxy(fn || function() {
        }, this)(), this;
      },
      setToolbarAutoFixed : function(paintHorizontalGrid) {
        var state = this.state;
        var me = this.editor;
        var origin = this.toolbar;
        var config = this.settings;
        if (void 0 !== paintHorizontalGrid) {
          config.toolbarAutoFixed = paintHorizontalGrid;
        }
        var calculateTapTarget = function() {
          var $WINDOW = $(window);
          var tagHeight = $WINDOW.scrollTop();
          if (!config.toolbarAutoFixed) {
            return false;
          }
          if (tagHeight - me.offset().top > 10 && tagHeight < me.height()) {
            origin.css({
              position : "fixed",
              width : me.width() + "px",
              left : ($WINDOW.width() - me.width()) / 2 + "px"
            });
          } else {
            origin.css({
              position : "absolute",
              width : "100%",
              left : 0
            });
          }
        };
        return !state.fullscreen && !state.preview && config.toolbar && config.toolbarAutoFixed && $(window).bind("scroll", calculateTapTarget), this;
      },
      setToolbar : function() {
        var options = this.settings;
        if (options.readOnly) {
          return this;
        }
        var me = this.editor;
        var preview = this.preview;
        var classPrefix = this.classPrefix;
        var toolbar = this.toolbar = me.children("." + classPrefix + "toolbar");
        if (options.toolbar && toolbar.length < 1) {
          var cols = '<div class="' + classPrefix + 'toolbar"><div class="' + classPrefix + 'toolbar-container"><ul class="' + classPrefix + 'menu"></ul></div></div>';
          me.append(cols);
          toolbar = this.toolbar = me.children("." + classPrefix + "toolbar");
        }
        if (!options.toolbar) {
          return toolbar.hide(), this;
        }
        toolbar.show();
        var extendScopeBuffer = "function" == typeof options.toolbarIcons ? options.toolbarIcons() : "string" == typeof options.toolbarIcons ? self.toolbarModes[options.toolbarIcons] : options.toolbarIcons;
        var jQHeader = toolbar.find("." + this.classPrefix + "menu");
        var i = "";
        var haveBitSet = false;
        var n = 0;
        var numberOfFrustums = extendScopeBuffer.length;
        for (; n < numberOfFrustums; n++) {
          var name = extendScopeBuffer[n];
          if ("||" === name) {
            haveBitSet = true;
          } else {
            if ("|" === name) {
              i = i + '<li class="divider" unselectable="on">|</li>';
            } else {
              var out = /h(\d)/.test(name);
              var index = name;
              if (!("watch" !== name || options.watch)) {
                index = "unwatch";
              }
              var current = options.lang.toolbar[index];
              var tag = options.toolbarIconTexts[index];
              var val = options.toolbarIconsClass[index];
              current = void 0 === current ? "" : current;
              tag = void 0 === tag ? "" : tag;
              val = void 0 === val ? "" : val;
              var s = haveBitSet ? '<li class="pull-right">' : "<li>";
              if (void 0 !== options.toolbarCustomIcons[name] && "function" != typeof options.toolbarCustomIcons[name]) {
                s = s + options.toolbarCustomIcons[name];
              } else {
                s = s + ('<a href="javascript:;" title="' + current + '" unselectable="on">');
                s = s + ('<i class="fa ' + val + '" name="' + name + '" unselectable="on">' + (out ? name.toUpperCase() : "" === val ? tag : "") + "</i>");
                s = s + "</a>";
              }
              s = s + "</li>";
              i = haveBitSet ? s + i : i + s;
            }
          }
        }
        return jQHeader.html(i), jQHeader.find('[title="Lowercase"]').attr("title", options.lang.toolbar.lowercase), jQHeader.find('[title="ucwords"]').attr("title", options.lang.toolbar.ucwords), this.setToolbarHandler(), this.setToolbarAutoFixed(), this;
      },
      dialogLockScreen : function() {
        return $.proxy(self.dialogLockScreen, this)(), this;
      },
      dialogShowMask : function(mmCoreSplitViewBlock) {
        return $.proxy(self.dialogShowMask, this)(mmCoreSplitViewBlock), this;
      },
      getToolbarHandles : function(versionDiff) {
        var globalConfig = this.toolbarHandlers = self.toolbarHandlers;
        return versionDiff && void 0 !== toolbarIconHandlers[versionDiff] ? globalConfig[versionDiff] : globalConfig;
      },
      setToolbarHandler : function() {
        var tab = this;
        var options = this.settings;
        if (!options.toolbar || options.readOnly) {
          return this;
        }
        var toolbar = this.toolbar;
        var cm = this.cm;
        var classPrefix = this.classPrefix;
        var container = this.toolbarIcons = toolbar.find("." + classPrefix + "menu > li > a");
        var chain = this.getToolbarHandles();
        return container.bind(self.mouseOrTouch("click", "touchend"), function(event) {
          var enabled = $(this).children(".fa");
          var key = enabled.attr("name");
          var transtemp2 = cm.getCursor();
          var lastviewmatrix = cm.getSelection();
          if ("" !== key) {
            return tab.activeIcon = enabled, void 0 !== chain[key] ? $.proxy(chain[key], tab)(cm) : void 0 !== options.toolbarHandlers[key] && $.proxy(options.toolbarHandlers[key], tab)(cm, enabled, transtemp2, lastviewmatrix), "link" !== key && "reference-link" !== key && "image" !== key && "code-block" !== key && "preformatted-text" !== key && "watch" !== key && "preview" !== key && "search" !== key && "fullscreen" !== key && "info" !== key && cm.focus(), false;
          }
        }), this;
      },
      createDialog : function(e) {
        return $.proxy(self.createDialog, this)(e);
      },
      createInfoDialog : function() {
        var _this = this;
        var me = this.editor;
        var classPrefix = this.classPrefix;
        var cols = ['<div class="' + classPrefix + "dialog " + classPrefix + 'dialog-info" style="">', '<div class="' + classPrefix + 'dialog-container">', '<h1><i class="editormd-logo editormd-logo-lg editormd-logo-color"></i> ' + self.title + "<small>v" + self.version + "</small></h1>", "<p>" + this.lang.description + "</p>", '<p style="margin: 10px 0 20px 0;"><a href="' + self.homePage + '" target="_blank">' + self.homePage + ' <i class="fa fa-external-link"></i></a></p>', '<p style="font-size: 0.85em;">Copyright &copy; 2015 <a href="https://github.com/pandao" target="_blank" class="hover-link">Pandao</a>, The <a href="https://github.com/pandao/editor.md/blob/master/LICENSE" target="_blank" class="hover-link">MIT</a> License.</p>', 
        "</div>", '<a href="javascript:;" class="fa fa-close ' + classPrefix + 'dialog-close"></a>', "</div>"].join("\n");
        me.append(cols);
        var element = this.infoDialog = me.children("." + classPrefix + "dialog-info");
        return element.find("." + classPrefix + "dialog-close").bind(self.mouseOrTouch("click", "touchend"), function() {
          _this.hideInfoDialog();
        }), element.css("border", self.isIE8 ? "1px solid #ddd" : "").css("z-index", self.dialogZindex).show(), this.infoDialogPosition(), this;
      },
      infoDialogPosition : function() {
        var $floatContainer = this.infoDialog;
        var _center_loader = function() {
          $floatContainer.css({
            top : ($(window).height() - $floatContainer.height()) / 2 + "px",
            left : ($(window).width() - $floatContainer.width()) / 2 + "px"
          });
        };
        return _center_loader(), $(window).resize(_center_loader), this;
      },
      showInfoDialog : function() {
        $("html,body").css("overflow-x", "hidden");
        var _this = this;
        var ed = this.editor;
        var settings = this.settings;
        var thumb = this.infoDialog = ed.children("." + this.classPrefix + "dialog-info");
        return thumb.length < 1 && this.createInfoDialog(), this.lockScreen(true), this.mask.css({
          opacity : settings.dialogMaskOpacity,
          backgroundColor : settings.dialogMaskBgColor
        }).show(), thumb.css("z-index", self.dialogZindex).show(), this.infoDialogPosition(), this;
      },
      hideInfoDialog : function() {
        return $("html,body").css("overflow-x", ""), this.infoDialog.hide(), this.mask.hide(), this.lockScreen(false), this;
      },
      lockScreen : function(data) {
        return self.lockScreen(data), this.resize(), this;
      },
      recreate : function() {
        var _this = this;
        var e = this.editor;
        var options = this.settings;
        return this.codeMirror.remove(), this.setCodeMirror(), options.readOnly || (e.find(".editormd-dialog").length > 0 && e.find(".editormd-dialog").remove(), options.toolbar && (this.getToolbarHandles(), this.setToolbar())), this.loadedDisplay(true), this;
      },
      previewCodeHighlight : function() {
        var options = this.settings;
        var previewContainer = this.previewContainer;
        return options.previewCodeHighlight && (previewContainer.find("pre").addClass("prettyprint linenums"), "undefined" != typeof prettyPrint && prettyPrint()), this;
      },
      katexRender : function() {
        return null === _takingTooLongTimeout ? this : (this.previewContainer.find("." + self.classNames.tex).each(function() {
          var $element = $(this);
          self.$katex.render($element.text(), $element[0]);
          $element.find(".katex").css("font-size", "1.6em");
        }), this);
      },
      flowChartAndSequenceDiagramRender : function() {
        var $this = this;
        var $e = this.settings;
        var previewContainer = this.previewContainer;
        if (self.isIE8) {
          return this;
        }
        if ($e.flowChart) {
          if (null === paintNodesTimeout) {
            return this;
          }
          previewContainer.find(".flowchart").flowChart();
        }
        if ($e.sequenceDiagram) {
          previewContainer.find(".sequence-diagram").sequenceDiagram({
            theme : "simple"
          });
        }
        var modalContent = this.preview;
        var codeMirror;
        var $scrollTarget = this.codeMirror.find(".CodeMirror-scroll");
        var skew = $scrollTarget.height();
        var delta = $scrollTarget.scrollTop();
        var rowHeight = delta / $scrollTarget[0].scrollHeight;
        var offset = 0;
        modalContent.find(".markdown-toc-list").each(function() {
          offset = offset + $(this).height();
        });
        var i = modalContent.find(".editormd-toc-menu").height();
        return i = i || 0, $e.syncScrolling && (0 === delta ? modalContent.scrollTop(0) : delta + skew >= $scrollTarget[0].scrollHeight - 16 ? modalContent.scrollTop(modalContent[0].scrollHeight) : modalContent.scrollTop((modalContent[0].scrollHeight + offset + i) * rowHeight)), this;
      },
      registerKeyMaps : function(keyMap) {
        var $defaultTheme = this;
        var cm = this.cm;
        var options = this.settings;
        var data = self.toolbarHandlers;
        var compareTerms = options.disabledKeyMaps;
        if (keyMap = keyMap || null) {
          var name;
          for (name in keyMap) {
            var map;
            if ($.inArray(name, compareTerms) < 0) {
              ({})[name] = keyMap[name];
              cm.addKeyMap(keyMap);
            }
          }
        } else {
          var name;
          for (name in self.keyMaps) {
            var fn = self.keyMaps[name];
            var handler = "string" == typeof fn ? $.proxy(data[fn], $defaultTheme) : $.proxy(fn, $defaultTheme);
            if ($.inArray(name, ["F9", "F10", "F11"]) < 0 && $.inArray(name, compareTerms) < 0) {
              var keyMap = {};
              keyMap[name] = handler;
              cm.addKeyMap(keyMap);
            }
          }
          $(window).keydown(function(json) {
            var handlers = {
              120 : "F9",
              121 : "F10",
              122 : "F11"
            };
            if ($.inArray(handlers[json.keyCode], compareTerms) < 0) {
              switch(json.keyCode) {
                case 120:
                  return $.proxy(data.watch, $defaultTheme)(), false;
                case 121:
                  return $.proxy(data.preview, $defaultTheme)(), false;
                case 122:
                  return $.proxy(data.fullscreen, $defaultTheme)(), false;
              }
            }
          });
        }
        return this;
      },
      bindScrollEvent : function() {
        var $selectedItem = this;
        var el = this.preview;
        var options = this.settings;
        var $body = this.codeMirror;
        var $ = self.mouseOrTouch;
        if (!options.syncScrolling) {
          return this;
        }
        var bindEvents = function() {
          $body.find(".CodeMirror-scroll").bind($("scroll", "touchmove"), function(event) {
            var skew = $(this).height();
            var delta = $(this).scrollTop();
            var ratio = delta / $(this)[0].scrollHeight;
            var heightOffset = 0;
            el.find(".markdown-toc-list").each(function() {
              heightOffset = heightOffset + $(this).height();
            });
            var height = el.find(".editormd-toc-menu").height();
            height = height || 0;
            if (0 === delta) {
              el.scrollTop(0);
            } else {
              if (delta + skew >= $(this)[0].scrollHeight - 16) {
                el.scrollTop(el[0].scrollHeight);
              } else {
                el.scrollTop((el[0].scrollHeight + heightOffset + height) * ratio);
              }
            }
            $.proxy(options.onscroll, $selectedItem)(event);
          });
        };
        var clear = function() {
          $body.find(".CodeMirror-scroll").unbind($("scroll", "touchmove"));
        };
        var init = function() {
          el.bind($("scroll", "touchmove"), function(event) {
            var offset = $(this).height();
            var height = $(this).scrollTop();
            var ratio = height / $(this)[0].scrollHeight;
            var elem = $body.find(".CodeMirror-scroll");
            if (0 === height) {
              elem.scrollTop(0);
            } else {
              if (height + offset >= $(this)[0].scrollHeight) {
                elem.scrollTop(elem[0].scrollHeight);
              } else {
                elem.scrollTop(elem[0].scrollHeight * ratio);
              }
            }
            $.proxy(options.onpreviewscroll, $selectedItem)(event);
          });
        };
        var handleEvent = function() {
          el.unbind($("scroll", "touchmove"));
        };
        return $body.bind({
          mouseover : bindEvents,
          mouseout : clear,
          touchstart : bindEvents,
          touchend : clear
        }), "single" === options.syncScrolling ? this : (el.bind({
          mouseover : init,
          mouseout : handleEvent,
          touchstart : init,
          touchend : handleEvent
        }), this);
      },
      bindChangeEvent : function() {
        var self = this;
        var cm = this.cm;
        var options = this.settings;
        return cm.on("change", function(canCreateDiscussions, isSlidingUp) {
          if (options.watch) {
            self.previewContainer.css("padding", options.autoHeight ? "20px 20px 50px 40px" : "20px");
          }
          _takingTooLongTimeout = setTimeout(function() {
            clearTimeout(_takingTooLongTimeout);
            self.save();
            _takingTooLongTimeout = null;
          }, options.delay);
        }), this;
      },
      loadedDisplay : function(zoomAware) {
        zoomAware = zoomAware || false;
        var _this = this;
        var $element = this.editor;
        var preview = this.preview;
        var s = this.settings;
        return this.containerMask.hide(), this.save(), s.watch && preview.show(), $element.data("oldWidth", $element.width()).data("oldHeight", $element.height()), this.resize(), this.registerKeyMaps(), $(window).resize(function() {
          _this.resize();
        }), this.bindScrollEvent().bindChangeEvent(), zoomAware || $.proxy(s.onload, this)(), this.state.loaded = true, this;
      },
      width : function(value) {
        return this.editor.css("width", "number" == typeof value ? value + "px" : value), this.resize(), this;
      },
      height : function(value) {
        return this.editor.css("height", "number" == typeof value ? value + "px" : value), this.resize(), this;
      },
      resize : function(width, height) {
        width = width || null;
        height = height || null;
        var state = this.state;
        var me = this.editor;
        var self = this.preview;
        var toolbar = this.toolbar;
        var options = this.settings;
        var editor = this.codeMirror;
        if (width && me.css("width", "number" == typeof width ? width + "px" : width), !options.autoHeight || state.fullscreen || state.preview ? (height && me.css("height", "number" == typeof height ? height + "px" : height), state.fullscreen && me.height($(window).height()), options.toolbar && !options.readOnly ? editor.css("margin-top", toolbar.height() + 1).height(me.height() - toolbar.height()) : editor.css("margin-top", 0).height(me.height())) : (me.css({
          height : "auto",
          minHeight : options.minHeight
        }), editor.css({
          height : "auto",
          minHeight : options.minHeight,
          maxHeight : options.maxHeight
        })), options.watch) {
          if (editor.width(me.width() / 2), self.width(state.preview ? me.width() : me.width() / 2), this.previewContainer.css("padding", options.autoHeight ? "20px 20px 50px 40px" : "20px"), options.toolbar && !options.readOnly ? self.css("top", toolbar.height() + 1) : self.css("top", 0), !options.autoHeight || state.fullscreen || state.preview) {
            var realVal = options.toolbar && !options.readOnly ? me.height() - toolbar.height() : me.height();
            self.height(realVal);
          } else {
            self.height("");
          }
        } else {
          editor.width(me.width());
          self.hide();
        }
        return state.loaded && $.proxy(options.onresize, this)(), this;
      },
      save : function() {
        if (null === _takingTooLongTimeout) {
          return this;
        }
        var _this = this;
        var s = this.state;
        var options = this.settings;
        var cm = this.cm;
        var text = cm.getValue();
        var div = this.previewContainer;
        if ("gfm" !== options.mode && "markdown" !== options.mode) {
          return this.markdownTextarea.val(text), this;
        }
        var activator = self.$marked;
        var type = this.markdownToC = [];
        var me = this.markedRendererOptions = {
          toc : options.toc,
          tocm : options.tocm,
          tocStartLevel : options.tocStartLevel,
          pageBreak : options.pageBreak,
          taskList : options.taskList,
          emoji : options.emoji,
          tex : options.tex,
          atLink : options.atLink,
          emailLink : options.emailLink,
          flowChart : options.flowChart,
          sequenceDiagram : options.sequenceDiagram,
          previewCodeHighlight : options.previewCodeHighlight
        };
        var value = this.markedOptions = {
          renderer : self.markedRenderer(type, me),
          gfm : true,
          tables : true,
          breaks : true,
          pedantic : false,
          sanitize : !options.htmlDecode,
          smartLists : true,
          smartypants : true
        };
        activator.setOptions(value);
        var node = self.$marked(text, value);
        if (node = self.filterHTMLTags(node, options.htmlDecode), this.markdownTextarea.text(text), cm.save(), options.saveHTMLToTextarea && this.htmlTextarea.text(node), options.watch || !options.watch && s.preview) {
          if (div.html(node), this.previewCodeHighlight(), options.toc) {
            var container = "" === options.tocContainer ? div : $(options.tocContainer);
            var otweets = container.find("." + this.classPrefix + "toc-menu");
            container.attr("previewContainer", "" === options.tocContainer ? "true" : "false");
            if ("" !== options.tocContainer && otweets.length > 0) {
              otweets.remove();
            }
            self.markdownToCRenderer(type, container, options.tocDropdown, options.tocStartLevel);
            if (options.tocDropdown || container.find("." + this.classPrefix + "toc-menu").length > 0) {
              self.tocDropdownMenu(container, "" !== options.tocTitle ? options.tocTitle : this.lang.tocTitle);
            }
            if ("" !== options.tocContainer) {
              div.find(".markdown-toc").css("border", "none");
            }
          }
          if (options.tex) {
            if (!self.kaTeXLoaded && options.autoLoadModules) {
              self.loadKaTeX(function() {
                self.$katex = katex;
                self.kaTeXLoaded = true;
                _this.katexRender();
              });
            } else {
              self.$katex = katex;
              this.katexRender();
            }
          }
          if (options.flowChart || options.sequenceDiagram) {
            paintNodesTimeout = setTimeout(function() {
              clearTimeout(paintNodesTimeout);
              _this.flowChartAndSequenceDiagramRender();
              paintNodesTimeout = null;
            }, 10);
          }
          if (s.loaded) {
            $.proxy(options.onchange, this)();
          }
        }
        return this;
      },
      focus : function() {
        return this.cm.focus(), this;
      },
      setCursor : function(line) {
        return this.cm.setCursor(line), this;
      },
      getCursor : function() {
        return this.cm.getCursor();
      },
      setSelection : function(anchor, index) {
        return this.cm.setSelection(anchor, index), this;
      },
      getSelection : function() {
        return this.cm.getSelection();
      },
      setSelections : function(ranges) {
        return this.cm.setSelections(ranges), this;
      },
      getSelections : function() {
        return this.cm.getSelections();
      },
      replaceSelection : function(text) {
        return this.cm.replaceSelection(text), this;
      },
      insertValue : function(value) {
        return this.replaceSelection(value), this;
      },
      appendMarkdown : function(i) {
        var options = this.settings;
        var cm = this.cm;
        return cm.setValue(cm.getValue() + i), this;
      },
      setMarkdown : function(value) {
        return this.cm.setValue(value || this.settings.markdown), this;
      },
      getMarkdown : function() {
        return this.cm.getValue();
      },
      getValue : function() {
        return this.cm.getValue();
      },
      setValue : function(value) {
        return this.cm.setValue(value), this;
      },
      clear : function() {
        return this.cm.setValue(""), this;
      },
      getHTML : function() {
        return this.settings.saveHTMLToTextarea ? this.htmlTextarea.val() : (alert("Error: settings.saveHTMLToTextarea == false"), false);
      },
      getTextareaSavedHTML : function() {
        return this.getHTML();
      },
      getPreviewedHTML : function() {
        return this.settings.watch ? this.previewContainer.html() : (alert("Error: settings.watch == false"), false);
      },
      watch : function(done) {
        var self = this.settings;
        if ($.inArray(self.mode, ["gfm", "markdown"]) < 0) {
          return this;
        }
        if (this.state.watching = self.watch = true, this.preview.show(), this.toolbar) {
          var classIdPrefix = self.toolbarIconsClass.watch;
          var READONLY_CLS = self.toolbarIconsClass.unwatch;
          var $userElement = this.toolbar.find(".fa[name=watch]");
          $userElement.parent().attr("title", self.lang.toolbar.watch);
          $userElement.removeClass(READONLY_CLS).addClass(classIdPrefix);
        }
        return this.codeMirror.css("border-right", "1px solid #ddd").width(this.editor.width() / 2), _takingTooLongTimeout = 0, this.save().resize(), self.onwatch || (self.onwatch = done || function() {
        }), $.proxy(self.onwatch, this)(), this;
      },
      unwatch : function(context) {
        var self = this.settings;
        if (this.state.watching = self.watch = false, this.preview.hide(), this.toolbar) {
          var READONLY_CLS = self.toolbarIconsClass.watch;
          var classIdPrefix = self.toolbarIconsClass.unwatch;
          var $userElement = this.toolbar.find(".fa[name=watch]");
          $userElement.parent().attr("title", self.lang.toolbar.unwatch);
          $userElement.removeClass(READONLY_CLS).addClass(classIdPrefix);
        }
        return this.codeMirror.css("border-right", "none").width(this.editor.width()), this.resize(), self.onunwatch || (self.onunwatch = context || function() {
        }), $.proxy(self.onunwatch, this)(), this;
      },
      show : function(data) {
        data = data || function() {
        };
        var $defaultTheme = this;
        return this.editor.show(0, function() {
          $.proxy(data, $defaultTheme)();
        }), this;
      },
      hide : function(data) {
        data = data || function() {
        };
        var $defaultTheme = this;
        return this.editor.hide(0, function() {
          $.proxy(data, $defaultTheme)();
        }), this;
      },
      previewing : function() {
        var that = this;
        var me = this.editor;
        var $this = this.preview;
        var $holder = this.toolbar;
        var settings = this.settings;
        var editor = this.codeMirror;
        var menuElement = this.previewContainer;
        if ($.inArray(settings.mode, ["gfm", "markdown"]) < 0) {
          return this;
        }
        if (settings.toolbar && $holder) {
          $holder.toggle();
          $holder.find(".fa[name=preview]").toggleClass("active");
        }
        editor.toggle();
        var bindPositionWithArrows = function(e) {
          if (e.shiftKey && 27 === e.keyCode) {
            that.previewed();
          }
        };
        if ("none" === editor.css("display")) {
          this.state.preview = true;
          if (this.state.fullscreen) {
            $this.css("background", "#fff");
          }
          me.find("." + this.classPrefix + "preview-close-btn").show().bind(self.mouseOrTouch("click", "touchend"), function() {
            that.previewed();
          });
          if (settings.watch) {
            menuElement.css("padding", "");
          } else {
            this.save();
          }
          menuElement.addClass(this.classPrefix + "preview-active");
          $this.show().css({
            position : "",
            top : 0,
            width : me.width(),
            height : settings.autoHeight && !this.state.fullscreen ? "auto" : me.height()
          });
          if (this.state.loaded) {
            $.proxy(settings.onpreviewing, this)();
          }
          $(window).bind("keyup", bindPositionWithArrows);
        } else {
          $(window).unbind("keyup", bindPositionWithArrows);
          this.previewed();
        }
      },
      previewed : function() {
        var me = this.editor;
        var container = this.preview;
        var toolbar = this.toolbar;
        var options = this.settings;
        var tds = this.previewContainer;
        var $trashTreeContextMenu = me.find("." + this.classPrefix + "preview-close-btn");
        return this.state.preview = false, this.codeMirror.show(), options.toolbar && toolbar.show(), container[options.watch ? "show" : "hide"](), $trashTreeContextMenu.hide().unbind(self.mouseOrTouch("click", "touchend")), tds.removeClass(this.classPrefix + "preview-active"), options.watch && tds.css("padding", "20px"), container.css({
          background : null,
          position : "absolute",
          width : me.width() / 2,
          height : options.autoHeight && !this.state.fullscreen ? "auto" : me.height() - toolbar.height(),
          top : options.toolbar ? toolbar.height() : 0
        }), this.state.loaded && $.proxy(options.onpreviewed, this)(), this;
      },
      fullscreen : function() {
        var _this = this;
        var state = this.state;
        var e = this.editor;
        var preview = this.preview;
        var toolbar = this.toolbar;
        var s = this.settings;
        var clazz = this.classPrefix + "fullscreen";
        if (toolbar) {
          toolbar.find(".fa[name=fullscreen]").parent().toggleClass("active");
        }
        var update = function(event) {
          if (!(event.shiftKey || 27 !== event.keyCode)) {
            if (state.fullscreen) {
              _this.fullscreenExit();
            }
          }
        };
        return e.hasClass(clazz) ? ($(window).unbind("keyup", update), this.fullscreenExit()) : (state.fullscreen = true, $("html,body").css("overflow", "hidden"), e.css({
          width : $(window).width(),
          height : $(window).height()
        }).addClass(clazz), this.resize(), $.proxy(s.onfullscreen, this)(), $(window).bind("keyup", update)), this;
      },
      fullscreenExit : function() {
        var $element = this.editor;
        var s = this.settings;
        var $tab = this.toolbar;
        var clazz = this.classPrefix + "fullscreen";
        return this.state.fullscreen = false, $tab && $tab.find(".fa[name=fullscreen]").parent().removeClass("active"), $("html,body").css("overflow", ""), $element.css({
          width : $element.data("oldWidth"),
          height : $element.data("oldHeight")
        }).removeClass(clazz), this.resize(), $.proxy(s.onfullscreenExit, this)(), this;
      },
      executePlugin : function(pluginName, name) {
        var $el = this;
        var status = this.cm;
        var settings;
        return name = this.settings.pluginPath + name, "function" == typeof define ? void 0 === this[pluginName] ? (alert("Error: " + pluginName + " plugin is not found, you are not load this plugin."), this) : (this[pluginName](status), this) : ($.inArray(name, self.loadFiles.plugin) < 0 ? self.loadPlugin(name, function() {
          self.loadPlugins[pluginName] = $el[pluginName];
          $el[pluginName](status);
        }) : $.proxy(self.loadPlugins[pluginName], this)(status), this);
      },
      search : function(win) {
        var options = this.settings;
        return options.searchReplace ? (options.readOnly || this.cm.execCommand(win || "find"), this) : (alert("Error: settings.searchReplace == false"), this);
      },
      searchReplace : function() {
        return this.search("replace"), this;
      },
      searchReplaceAll : function() {
        return this.search("replaceAll"), this;
      }
    };
    self.fn.init.prototype = self.fn;
    /**
     * @return {undefined}
     */
    self.dialogLockScreen = function() {
      var settings;
      if ((this.settings || {
        dialogLockScreen : true
      }).dialogLockScreen) {
        $("html,body").css("overflow", "hidden");
        this.resize();
      }
    };
    /**
     * @param {?} $window
     * @return {undefined}
     */
    self.dialogShowMask = function($window) {
      var ed = this.editor;
      var settings = this.settings || {
        dialogShowMask : true
      };
      $window.css({
        top : ($(window).height() - $window.height()) / 2 + "px",
        left : ($(window).width() - $window.width()) / 2 + "px"
      });
      if (settings.dialogShowMask) {
        ed.children("." + this.classPrefix + "mask").css("z-index", parseInt($window.css("z-index")) - 1).show();
      }
    };
    self.toolbarHandlers = {
      undo : function() {
        this.cm.undo();
      },
      redo : function() {
        this.cm.redo();
      },
      bold : function() {
        var cm = this.cm;
        var curEnd = cm.getCursor();
        var newPwd2 = cm.getSelection();
        cm.replaceSelection("**" + newPwd2 + "**");
        if ("" === newPwd2) {
          cm.setCursor(curEnd.line, curEnd.ch + 2);
        }
      },
      del : function() {
        var cm = this.cm;
        var curEnd = cm.getCursor();
        var newPwd2 = cm.getSelection();
        cm.replaceSelection("~~" + newPwd2 + "~~");
        if ("" === newPwd2) {
          cm.setCursor(curEnd.line, curEnd.ch + 2);
        }
      },
      italic : function() {
        var cm = this.cm;
        var curEnd = cm.getCursor();
        var newPwd2 = cm.getSelection();
        cm.replaceSelection("*" + newPwd2 + "*");
        if ("" === newPwd2) {
          cm.setCursor(curEnd.line, curEnd.ch + 1);
        }
      },
      quote : function() {
        var cm = this.cm;
        var curEnd = cm.getCursor();
        var right = cm.getSelection();
        if (0 !== curEnd.ch) {
          cm.setCursor(curEnd.line, 0);
          cm.replaceSelection("> " + right);
          cm.setCursor(curEnd.line, curEnd.ch + 2);
        } else {
          cm.replaceSelection("> " + right);
        }
      },
      ucfirst : function() {
        var cm = this.cm;
        var search = cm.getSelection();
        var ranges = cm.listSelections();
        cm.replaceSelection(self.firstUpperCase(search));
        cm.setSelections(ranges);
      },
      ucwords : function() {
        var cm = this.cm;
        var search = cm.getSelection();
        var ranges = cm.listSelections();
        cm.replaceSelection(self.wordsFirstUpperCase(search));
        cm.setSelections(ranges);
      },
      uppercase : function() {
        var cm = this.cm;
        var sniffedDoctype = cm.getSelection();
        var ranges = cm.listSelections();
        cm.replaceSelection(sniffedDoctype.toUpperCase());
        cm.setSelections(ranges);
      },
      lowercase : function() {
        var cm = this.cm;
        var cursor = cm.getCursor();
        var currentNick = cm.getSelection();
        var ranges = cm.listSelections();
        cm.replaceSelection(currentNick.toLowerCase());
        cm.setSelections(ranges);
      },
      h1 : function() {
        var cm = this.cm;
        var curEnd = cm.getCursor();
        var right = cm.getSelection();
        if (0 !== curEnd.ch) {
          cm.setCursor(curEnd.line, 0);
          cm.replaceSelection("# " + right);
          cm.setCursor(curEnd.line, curEnd.ch + 2);
        } else {
          cm.replaceSelection("# " + right);
        }
      },
      h2 : function() {
        var cm = this.cm;
        var curEnd = cm.getCursor();
        var right = cm.getSelection();
        if (0 !== curEnd.ch) {
          cm.setCursor(curEnd.line, 0);
          cm.replaceSelection("## " + right);
          cm.setCursor(curEnd.line, curEnd.ch + 3);
        } else {
          cm.replaceSelection("## " + right);
        }
      },
      h3 : function() {
        var cm = this.cm;
        var curEnd = cm.getCursor();
        var right = cm.getSelection();
        if (0 !== curEnd.ch) {
          cm.setCursor(curEnd.line, 0);
          cm.replaceSelection("### " + right);
          cm.setCursor(curEnd.line, curEnd.ch + 4);
        } else {
          cm.replaceSelection("### " + right);
        }
      },
      h4 : function() {
        var cm = this.cm;
        var curEnd = cm.getCursor();
        var right = cm.getSelection();
        if (0 !== curEnd.ch) {
          cm.setCursor(curEnd.line, 0);
          cm.replaceSelection("#### " + right);
          cm.setCursor(curEnd.line, curEnd.ch + 5);
        } else {
          cm.replaceSelection("#### " + right);
        }
      },
      h5 : function() {
        var cm = this.cm;
        var curEnd = cm.getCursor();
        var right = cm.getSelection();
        if (0 !== curEnd.ch) {
          cm.setCursor(curEnd.line, 0);
          cm.replaceSelection("##### " + right);
          cm.setCursor(curEnd.line, curEnd.ch + 6);
        } else {
          cm.replaceSelection("##### " + right);
        }
      },
      h6 : function() {
        var cm = this.cm;
        var curEnd = cm.getCursor();
        var right = cm.getSelection();
        if (0 !== curEnd.ch) {
          cm.setCursor(curEnd.line, 0);
          cm.replaceSelection("###### " + right);
          cm.setCursor(curEnd.line, curEnd.ch + 7);
        } else {
          cm.replaceSelection("###### " + right);
        }
      },
      "list-ul" : function() {
        var cm = this.cm;
        var cursor = cm.getCursor();
        var left = cm.getSelection();
        if ("" === left) {
          cm.replaceSelection("- " + left);
        } else {
          var args = left.split("\n");
          var i = 0;
          var arg_count = args.length;
          for (; i < arg_count; i++) {
            args[i] = "" === args[i] ? "" : "- " + args[i];
          }
          cm.replaceSelection(args.join("\n"));
        }
      },
      "list-ol" : function() {
        var cm = this.cm;
        var cursor = cm.getCursor();
        var left = cm.getSelection();
        if ("" === left) {
          cm.replaceSelection("1. " + left);
        } else {
          var args = left.split("\n");
          var i = 0;
          var arg_count = args.length;
          for (; i < arg_count; i++) {
            args[i] = "" === args[i] ? "" : i + 1 + ". " + args[i];
          }
          cm.replaceSelection(args.join("\n"));
        }
      },
      hr : function() {
        var cm = this.cm;
        var cur2 = cm.getCursor();
        var selection = cm.getSelection();
        cm.replaceSelection((0 !== cur2.ch ? "\n\n" : "\n") + "------------\n\n");
      },
      tex : function() {
        if (!this.settings.tex) {
          return alert("settings.tex === false"), this;
        }
        var cm = this.cm;
        var curEnd = cm.getCursor();
        var text = cm.getSelection();
        cm.replaceSelection("$$" + text + "$$");
        if ("" === text) {
          cm.setCursor(curEnd.line, curEnd.ch + 2);
        }
      },
      link : function() {
        this.executePlugin("linkDialog", "link-dialog/link-dialog");
      },
      "reference-link" : function() {
        this.executePlugin("referenceLinkDialog", "reference-link-dialog/reference-link-dialog");
      },
      pagebreak : function() {
        if (!this.settings.pageBreak) {
          return alert("settings.pageBreak === false"), this;
        }
        var cm = this.cm;
        var selection = cm.getSelection();
        cm.replaceSelection("\r\n[========]\r\n");
      },
      image : function() {
        this.executePlugin("imageDialog", "image-dialog/image-dialog");
      },
      code : function() {
        var cm = this.cm;
        var curEnd = cm.getCursor();
        var newPwd2 = cm.getSelection();
        cm.replaceSelection("`" + newPwd2 + "`");
        if ("" === newPwd2) {
          cm.setCursor(curEnd.line, curEnd.ch + 1);
        }
      },
      "code-block" : function() {
        this.executePlugin("codeBlockDialog", "code-block-dialog/code-block-dialog");
      },
      "preformatted-text" : function() {
        this.executePlugin("preformattedTextDialog", "preformatted-text-dialog/preformatted-text-dialog");
      },
      table : function() {
        this.executePlugin("tableDialog", "table-dialog/table-dialog");
      },
      datetime : function() {
        var cm = this.cm;
        var selection = cm.getSelection();
        var expected_date2 = new Date;
        var langName = this.settings.lang.name;
        var replaceText = self.dateFormat() + " " + self.dateFormat("zh-cn" === langName || "zh-tw" === langName ? "cn-week-day" : "week-day");
        cm.replaceSelection(replaceText);
      },
      emoji : function() {
        this.executePlugin("emojiDialog", "emoji-dialog/emoji-dialog");
      },
      "html-entities" : function() {
        this.executePlugin("htmlEntitiesDialog", "html-entities-dialog/html-entities-dialog");
      },
      "goto-line" : function() {
        this.executePlugin("gotoLineDialog", "goto-line-dialog/goto-line-dialog");
      },
      watch : function() {
        this[this.settings.watch ? "unwatch" : "watch"]();
      },
      preview : function() {
        this.previewing();
      },
      fullscreen : function() {
        this.fullscreen();
      },
      clear : function() {
        this.clear();
      },
      search : function() {
        this.search();
      },
      help : function() {
        this.executePlugin("helpDialog", "help-dialog/help-dialog");
      },
      info : function() {
        this.showInfoDialog();
      }
    };
    var isMac;
    var FOLDER_NAME = navigator.platform.toUpperCase().indexOf("MAC") >= 0 ? "Cmd" : "Ctrl";
    self.keyMaps = {
      [FOLDER_NAME + "-1"]:"h1",
      [FOLDER_NAME + "-2"]:"h2",
      [FOLDER_NAME + "-3"]:"h3",
      [FOLDER_NAME + "-4"]:"h4",
      [FOLDER_NAME + "-5"]:"h5",
      [FOLDER_NAME + "-6"]:"h6",
      [FOLDER_NAME + "-B"]:"bold",
      [FOLDER_NAME + "-D"]:"datetime",
      [FOLDER_NAME + "Ctrl-E"]:function() {
        var cm = this.cm;
        var curEnd = cm.getCursor();
        var newPwd2 = cm.getSelection();
        if (this.settings.emoji) {
          cm.replaceSelection(":" + newPwd2 + ":");
          if ("" === newPwd2) {
            cm.setCursor(curEnd.line, curEnd.ch + 1);
          }
        } else {
          alert("Error: settings.emoji == false");
        }
      },
      [FOLDER_NAME + "-Alt-G"]:"goto-line",
      [FOLDER_NAME + "-H"]:"hr",
      [FOLDER_NAME + "-I"]:"italic",
      [FOLDER_NAME + "-K"]:"code",
      "Ctrl-L" : function() {
        var cm = this.cm;
        var curEnd = cm.getCursor();
        var val = cm.getSelection();
        var variable_encoded = "" === val ? "" : ' "' + val + '"';
        cm.replaceSelection("[" + val + "](" + variable_encoded + ")");
        if ("" === val) {
          cm.setCursor(curEnd.line, curEnd.ch + 1);
        }
      },
      [FOLDER_NAME + "-U"]:"list-ul",
      "Shift-Ctrl-A" : function() {
        var cm = this.cm;
        var curEnd = cm.getCursor();
        var right = cm.getSelection();
        if (this.settings.atLink) {
          cm.replaceSelection("@" + right);
          if ("" === right) {
            cm.setCursor(curEnd.line, curEnd.ch + 1);
          }
        } else {
          alert("Error: settings.atLink == false");
        }
      },
      ["Shift" + FOLDER_NAME + "-C"]:"code",
      ["Shift" + FOLDER_NAME + "Q"]:"quote",
      ["Shift" + FOLDER_NAME + "S"]:"del",
      ["Shift" + FOLDER_NAME + "K"]:"tex",
      "Shift-Alt-C" : function() {
        var cm = this.cm;
        var curEnd = cm.getCursor();
        var h = cm.getSelection();
        cm.replaceSelection(["```", h, "```"].join("\n"));
        if ("" === h) {
          cm.setCursor(curEnd.line, curEnd.ch + 3);
        }
      },
      ["Shift-" + FOLDER_NAME + "-Alt-C"]:"code-block",
      ["Shift-" + FOLDER_NAME + "-H"]:"html-entities",
      "Shift-Alt-H" : "help",
      ["Shift-" + FOLDER_NAME + "-E"]:"emoji",
      ["Shift-" + FOLDER_NAME + "-U"]:"uppercase",
      "Shift-Alt-U" : "ucwords",
      ["Shift-" + FOLDER_NAME + "-Alt-U"]:"ucfirst",
      "Shift-Alt-L" : "lowercase",
      ["Shift-" + FOLDER_NAME + "-I"]:function() {
        var cm = this.cm;
        var curEnd = cm.getCursor();
        var val = cm.getSelection();
        var variable_encoded = "" === val ? "" : ' "' + val + '"';
        cm.replaceSelection("![" + val + "](" + variable_encoded + ")");
        if ("" === val) {
          cm.setCursor(curEnd.line, curEnd.ch + 4);
        }
      },
      ["Shift-" + FOLDER_NAME + "-Alt-I"]:"image",
      ["Shift-" + FOLDER_NAME + "-L"]:"link",
      ["Shift-" + FOLDER_NAME + "-O"]:"list-ol",
      ["Shift-" + FOLDER_NAME + "-P"]:"preformatted-text",
      ["Shift-" + FOLDER_NAME + "-T"]:"table",
      "Shift-Alt-P" : "pagebreak",
      F9 : "watch",
      F10 : "preview",
      F11 : "fullscreen"
    };
    var trim = function(s) {
      return String.prototype.trim ? s.trim() : s.replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g, "");
    };
    self.trim = trim;
    var top = function(terms) {
      return terms.toLowerCase().replace(/\b(\w)|\s(\w)/g, function(shortMonthName) {
        return shortMonthName.toUpperCase();
      });
    };
    self.ucwords = self.wordsFirstUpperCase = top;
    var zoom = function(viewer) {
      return viewer.toLowerCase().replace(/\b(\w)/, function(shortMonthName) {
        return shortMonthName.toUpperCase();
      });
    };
    var bounds = zoom;
    return self.firstUpperCase = self.ucfirst = zoom, self.urls = {
      atLinkBase : "https://github.com/"
    }, self.regexs = {
      atLink : /@(\w+)/g,
      email : /(\w+)@(\w+)\.(\w+)\.?(\w+)?/g,
      emailLink : /(mailto:)?([\w\._]+)@(\w+)\.(\w+)\.?(\w+)?/g,
      emoji : /:([\w\+-]+):/g,
      emojiDatetime : /(\d{1,2}:\d{1,2}:\d{1,2})/g,
      twemoji : /:(tw-([\w]+)-?(\w+)?):/g,
      fontAwesome : /:(fa-([\w]+)(-(\w+)){0,}):/g,
      editormdLogo : /:(editormd-logo-?(\w+)?):/g,
      pageBreak : /^\[[=]{8,}\]$/
    }, self.emoji = {
      path : "http://www.emoji-cheat-sheet.com/graphics/emojis/",
      ext : ".png"
    }, self.twemoji = {
      path : "http://twemoji.maxcdn.com/36x36/",
      ext : ".png"
    }, self.markedRenderer = function(types, data) {
      var config = {
        toc : true,
        tocm : false,
        tocStartLevel : 1,
        pageBreak : true,
        atLink : true,
        emailLink : true,
        taskList : false,
        emoji : false,
        tex : false,
        flowChart : false,
        sequenceDiagram : false
      };
      var options = $.extend(config, data || {});
      var mario = self.$marked;
      var renderer = new mario.Renderer;
      types = types || [];
      var result = self.regexs;
      var d = result.atLink;
      var list = result.emoji;
      var key = result.email;
      var ansiAttributesRegexp = result.emailLink;
      var body = result.twemoji;
      var args = result.fontAwesome;
      var content = result.editormdLogo;
      var suite = result.pageBreak;
      return renderer.emoji = function(text) {
        var matches = (text = text.replace(self.regexs.emojiDatetime, function(commaParam) {
          return commaParam.replace(/:/g, "&#58;");
        })).match(list);
        if (!matches || !options.emoji) {
          return text;
        }
        var i = 0;
        var inflight = matches.length;
        for (; i < inflight; i++) {
          if (":+1:" === matches[i]) {
            matches[i] = ":\\+1:";
          }
          text = text.replace(new RegExp(matches[i]), function(expression, canCreateDiscussions) {
            var fields = expression.match(args);
            var item = expression.replace(/:/g, "");
            if (fields) {
              var j = 0;
              var fieldsLen = fields.length;
              for (; j < fieldsLen; j++) {
                var iconClass = fields[j].replace(/:/g, "");
                return '<i class="fa ' + iconClass + ' fa-emoji" title="' + iconClass.replace("fa-", "") + '"></i>';
              }
            } else {
              var images = expression.match(content);
              var map = expression.match(body);
              if (images) {
                var j = 0;
                var imagesLen = images.length;
                for (; j < imagesLen; j++) {
                  var retryLinkHref = images[j].replace(/:/g, "");
                  return '<i class="' + retryLinkHref + '" title="Editor.md logo (' + retryLinkHref + ')"></i>';
                }
              } else {
                if (!map) {
                  var src = "+1" === item ? "plus1" : item;
                  return src = "moon" === (src = "black_large_square" === src ? "black_square" : src) ? "waxing_gibbous_moon" : src, '<img src="' + self.emoji.path + src + self.emoji.ext + '" class="emoji" title="&#58;' + item + '&#58;" alt="&#58;' + item + '&#58;" />';
                }
                var j = 0;
                var mapWidth = map.length;
                for (; j < mapWidth; j++) {
                  var name = map[j].replace(/:/g, "").replace("tw-", "");
                  return '<img src="' + self.twemoji.path + name + self.twemoji.ext + '" title="twemoji-' + name + '" alt="twemoji-' + name + '" class="emoji twemoji" />';
                }
              }
            }
          });
        }
        return text;
      }, renderer.atLink = function(string) {
        return d.test(string) ? (options.atLink && (string = (string = string.replace(key, function(commaParam, canCreateDiscussions, isSlidingUp, dontForceConstraints) {
          return commaParam.replace(/@/g, "_#_&#64;_#_");
        })).replace(d, function(isSlidingUp, canCreateDiscussions) {
          return '<a href="' + self.urls.atLinkBase + canCreateDiscussions + '" title="&#64;' + canCreateDiscussions + '" class="at-link">' + isSlidingUp + "</a>";
        }).replace(/_#_&#64;_#_/g, "@")), options.emailLink && (string = string.replace(ansiAttributesRegexp, function(canCreateDiscussions, isSlidingUp, dontForceConstraints, forceExecution, mutationDetail) {
          return !isSlidingUp && $.inArray(mutationDetail, "jpg|jpeg|png|gif|webp|ico|icon|pdf".split("|")) < 0 ? '<a href="mailto:' + canCreateDiscussions + '">' + canCreateDiscussions + "</a>" : canCreateDiscussions;
        })), string) : string;
      }, renderer.link = function(href, title, format) {
        if (this.options.sanitize) {
          try {
            var prot;
            if (0 === decodeURIComponent(unescape(href)).replace(/[^\w:]/g, "").toLowerCase().indexOf("javascript:")) {
              return "";
            }
          } catch (e) {
            return "";
          }
        }
        var $out = '<a href="' + href + '"';
        return d.test(title) || d.test(format) ? (title && ($out = $out + (' title="' + title.replace(/@/g, "&#64;"))), $out + '">' + format.replace(/@/g, "&#64;") + "</a>") : (title && ($out = $out + (' title="' + title + '"')), $out = $out + (">" + format + "</a>"));
      }, renderer.heading = function(text, level, raw) {
        var raw = text;
        var rejectRegexp = /\s*<a\s*href="(.*)"\s*([^>]*)>(.*)<\/a>\s*/;
        var reFootnoteIndex = /\s*<a\s*([^>]+)>([^>]*)<\/a>\s*/g;
        if (rejectRegexp.test(text)) {
          var sharedItems = [];
          var i = 0;
          var patchLen = (text = text.split(/<a\s*([^>]+)>([^>]*)<\/a>/)).length;
          for (; i < patchLen; i++) {
            sharedItems.push(text[i].replace(/\s*href="(.*)"\s*/g, ""));
          }
          text = sharedItems.join(" ");
        }
        var slug = (text = trim(text)).toLowerCase().replace(/[^\w]+/g, "-");
        var data = {
          text : text,
          level : level,
          slug : slug
        };
        var isChinese;
        var id = /^[\u4e00-\u9fa5]+$/.test(text) ? escape(text).replace(/%/g, "") : text.toLowerCase().replace(/[^\w]+/g, "-");
        types.push(data);
        var skippedBytes = "<h" + level + ' id="h' + level + "-" + this.options.headerPrefix + id + '">';
        return skippedBytes = skippedBytes + ('<a name="' + text + '" class="reference-link"></a>'), skippedBytes = skippedBytes + '<span class="header-link octicon octicon-link"></span>', skippedBytes = skippedBytes + (rejectRegexp ? this.atLink(this.emoji(raw)) : this.atLink(this.emoji(text))), skippedBytes = skippedBytes + ("</h" + level + ">");
      }, renderer.pageBreak = function(obj) {
        return suite.test(obj) && options.pageBreak && (obj = '<hr style="page-break-after:always;" class="page-break editormd-page-break" />'), obj;
      }, renderer.paragraph = function(text) {
        var result = /\$\$(.*)\$\$/g.test(text);
        var match = /^\$\$(.*)\$\$$/.test(text);
        var shortname = match ? ' class="' + self.classNames.tex + '"' : "";
        var nonEmptySub = options.tocm ? /^(\[TOC\]|\[TOCM\])$/.test(text) : /^\[TOC\]$/.test(text);
        var nonEmptySup = /^\[TOCM\]$/.test(text);
        var MSUB = '<div class="markdown-toc editormd-markdown-toc">' + (text = !match && result ? text.replace(/(\$\$([^\$]*)\$\$)+/g, function(canCreateDiscussions, aShortcut) {
          return '<span class="' + self.classNames.tex + '">' + aShortcut.replace(/\$/g, "") + "</span>";
        }) : match ? text.replace(/\$/g, "") : text) + "</div>";
        return nonEmptySub ? nonEmptySup ? '<div class="editormd-toc-menu">' + MSUB + "</div><br/>" : MSUB : suite.test(text) ? this.pageBreak(text) : "<p" + shortname + ">" + this.atLink(this.emoji(text)) + "</p>\n";
      }, renderer.code = function(method, undefined, error) {
        return "seq" === undefined || "sequence" === undefined ? '<div class="sequence-diagram">' + method + "</div>" : "flow" === undefined ? '<div class="flowchart">' + method + "</div>" : "math" === undefined || "latex" === undefined || "katex" === undefined ? '<p class="' + self.classNames.tex + '">' + method + "</p>" : mario.Renderer.prototype.code.apply(this, arguments);
      }, renderer.tablecell = function(text, flags) {
        var type = flags.header ? "th" : "td";
        var tag;
        return (flags.align ? "<" + type + ' style="text-align:' + flags.align + '">' : "<" + type + ">") + this.atLink(this.emoji(text)) + "</" + type + ">\n";
      }, renderer.listitem = function(text) {
        return options.taskList && /^\s*\[[x\s]\]\s*/.test(text) ? (text = text.replace(/^\s*\[\s\]\s*/, '<input type="checkbox" class="task-list-item-checkbox" /> ').replace(/^\s*\[x\]\s*/, '<input type="checkbox" class="task-list-item-checkbox" checked disabled /> '), '<li style="list-style: none;">' + this.atLink(this.emoji(text)) + "</li>") : "<li>" + this.atLink(this.emoji(text)) + "</li>";
      }, renderer;
    }, self.markdownToCRenderer = function(children, dom, data, maxLevels) {
      var s = "";
      var state = [0];
      var classPrefix = this.classPrefix;
      maxLevels = maxLevels || 1;
      var i = 0;
      var length = children.length;
      for (; i < length; i++) {
        var xeText = children[i].text;
        var level = children[i].level;
        var setCount = state.length;
        var old_level = state[setCount - 1];
        var maxvarnr = 0;
        if (!(level < maxLevels)) {
          if (level > old_level) {
            s = s + "";
            state.push(level);
          } else {
            if (level < old_level) {
              var reducerMountPoint = setCount - 1;
              for (; reducerMountPoint >= 0; reducerMountPoint--) {
                if (!(level <= state[reducerMountPoint])) {
                  state.push(level);
                  break;
                }
                maxvarnr++;
                state.pop();
              }
              s = s + (new Array(maxvarnr + 1)).join("</ul></li>");
            } else {
              s = s + "</ul></li>";
            }
          }
          s = s + ('<li><a class="toc-level-' + level + '" href="#' + xeText + '" level="' + level + '">' + xeText + "</a><ul>");
        }
      }
      var $ctn = dom.find(".markdown-toc");
      if ($ctn.length < 1 && "false" === dom.attr("previewContainer")) {
        var response = '<div class="markdown-toc ' + classPrefix + 'markdown-toc"></div>';
        response = data ? '<div class="' + classPrefix + 'toc-menu">' + response + "</div>" : response;
        dom.html(response);
        $ctn = dom.find(".markdown-toc");
      }
      return data && $ctn.wrap('<div class="' + classPrefix + 'toc-menu"></div><br/>'), $ctn.html('<ul class="markdown-toc-list"></ul>').children(".markdown-toc-list").html(s.replace(/\r?\n?<ul><\/ul>/g, "")), $ctn;
    }, self.tocDropdownMenu = function(node, selector) {
      selector = selector || "Table of Contents";
      var left = 400;
      var syncedAnimals = node.find("." + this.classPrefix + "toc-menu");
      return syncedAnimals.each(function() {
        var $uno = $(this);
        var $that = $uno.children(".markdown-toc");
        var className = '<i class="fa fa-angle-down"></i>';
        var ol = '<a href="javascript:;" class="toc-menu-btn">' + className + selector + "</a>";
        var menu = $that.children("ul");
        var list = menu.find("li");
        $that.append(ol);
        list.first().before("<li><h1>" + selector + " " + className + "</h1></li>");
        $uno.mouseover(function() {
          menu.show();
          list.each(function() {
            var li = $(this);
            var ul = li.children("ul");
            if ("" === ul.html() && ul.remove(), ul.length > 0 && "" !== ul.html()) {
              var jQScrollable = li.children("a").first();
              if (jQScrollable.children(".fa").length < 1) {
                jQScrollable.append($(className).css({
                  float : "right",
                  paddingTop : "4px"
                }));
              }
            }
            li.mouseover(function() {
              ul.css("z-index", left).show();
              left = left + 1;
            }).mouseleave(function() {
              ul.hide();
            });
          });
        }).mouseleave(function() {
          menu.hide();
        });
      }), syncedAnimals;
    }, self.filterHTMLTags = function(value, str) {
      if ("string" != typeof value && (value = new String(value)), "string" != typeof str) {
        return value;
      }
      var expr = str.split("|");
      var prices = expr[0].split(",");
      var left = expr[1];
      var i = 0;
      var l = prices.length;
      for (; i < l; i++) {
        var cost = prices[i];
        value = filterXSS(value).replace(new RegExp("<s*" + cost + "s*([^>]*)>([^>]*)<s*/" + cost + "s*>", "igm"), "");
      }
      if (void 0 !== left) {
        var temp = /<(\w+)\s*([^>]*)>([^>]*)<\/(\w+)>/gi;
        value = "*" === left ? filterXSS(value).replace(temp, function(dontForceConstraints, canCreateDiscussions, forceExecution, isSlidingUp, $5) {
          return "<" + canCreateDiscussions + ">" + isSlidingUp + "</" + $5 + ">";
        }) : "on*" === left ? filterXSS(value).replace(temp, function(delete_behavior_form, value, isSlidingUp, canCreateDiscussions, undefined) {
          var tr = $("<" + value + ">" + canCreateDiscussions + "</" + undefined + ">");
          var atr = $(delete_behavior_form)[0].attributes;
          var attr = {};
          $.each(atr, function(i, a) {
            if ('"' !== a.nodeName) {
              attr[a.nodeName] = a.nodeValue;
              if ("href" === a.nodeName && a.nodeValue.toLowerCase().indexOf("javascript:") >= 0) {
                attr[a.nodeName] = "javascript:;";
              }
            }
          });
          $.each(attr, function(name) {
            if (0 === name.indexOf("on")) {
              delete attr[name];
            }
          });
          tr.attr(attr);
          var input = void 0 !== tr[1] ? $(tr[1]).text() : "";
          if (!value || isNaN(value) || value === undefined) {
            return value && isNaN(value) && value !== undefined ? (input = input + ("</" + undefined + ">"), tr[0].outerHTML + input) : tr[0].outerHTML + input;
          }
          input = input + ("<" + value + ">" + canCreateDiscussions + "</" + undefined + ">");
        }) : filterXSS(value).replace(temp, function(results_template, canCreateDiscussions, isSlidingUp, param) {
          var m = left.split(",");
          var html = $(results_template);
          return html.html(param), $.each(m, function(attributeName) {
            html.attr(m[attributeName], null);
          }), html[0].outerHTML;
        });
      }
      return value;
    }, self.markdownToHTML = function(string, parameters) {
      var options = {
        gfm : true,
        toc : true,
        tocm : false,
        tocStartLevel : 1,
        tocTitle : "\u76ee\u5f55",
        tocDropdown : false,
        tocContainer : "",
        markdown : "",
        markdownSourceCode : false,
        htmlDecode : false,
        autoLoadKaTeX : true,
        pageBreak : true,
        atLink : true,
        emailLink : true,
        tex : false,
        taskList : false,
        emoji : false,
        flowChart : false,
        sequenceDiagram : false,
        previewCodeHighlight : true
      };
      self.$marked = marked;
      var element = $("#" + string);
      var data = element.settings = $.extend(true, options, parameters || {});
      var input = element.find("textarea");
      if (input.length < 1) {
        element.append("<textarea></textarea>");
        input = element.find("textarea");
      }
      var value = "" === data.markdown ? input.val() : data.markdown;
      var type = [];
      var config = {
        toc : data.toc,
        tocm : data.tocm,
        tocStartLevel : data.tocStartLevel,
        taskList : data.taskList,
        emoji : data.emoji,
        tex : data.tex,
        pageBreak : data.pageBreak,
        atLink : data.atLink,
        emailLink : data.emailLink,
        flowChart : data.flowChart,
        sequenceDiagram : data.sequenceDiagram,
        previewCodeHighlight : data.previewCodeHighlight
      };
      var defaults = {
        renderer : self.markedRenderer(type, config),
        gfm : data.gfm,
        tables : true,
        breaks : true,
        pedantic : false,
        sanitize : !data.htmlDecode,
        smartLists : true,
        smartypants : true
      };
      value = new String(value);
      var content = marked(value, defaults);
      content = self.filterHTMLTags(content, data.htmlDecode);
      if (data.markdownSourceCode) {
        input.text(value);
      } else {
        input.remove();
      }
      element.addClass("markdown-body " + this.classPrefix + "html-preview").append(content);
      var dom = "" !== data.tocContainer ? $(data.tocContainer) : element;
      if ("" !== data.tocContainer && dom.attr("previewContainer", false), data.toc && (element.tocContainer = this.markdownToCRenderer(type, dom, data.tocDropdown, data.tocStartLevel), (data.tocDropdown || element.find("." + this.classPrefix + "toc-menu").length > 0) && this.tocDropdownMenu(element, data.tocTitle), "" !== data.tocContainer && element.find(".editormd-toc-menu, .editormd-markdown-toc").remove()), data.previewCodeHighlight && (element.find("pre").addClass("prettyprint linenums"), prettyPrint()), 
      self.isIE8 || (data.flowChart && element.find(".flowchart").flowChart(), data.sequenceDiagram && element.find(".sequence-diagram").sequenceDiagram({
        theme : "simple"
      })), data.tex) {
        var main = function() {
          element.find("." + self.classNames.tex).each(function() {
            var element = $(this);
            katex.render(element.html().replace(/&lt;/g, "<").replace(/&gt;/g, ">"), element[0]);
            element.find(".katex").css("font-size", "1.6em");
          });
        };
        if (!data.autoLoadKaTeX || self.$katex || self.kaTeXLoaded) {
          main();
        } else {
          this.loadKaTeX(function() {
            self.$katex = katex;
            self.kaTeXLoaded = true;
            main();
          });
        }
      }
      return element.getMarkdown = function() {
        return input.val();
      }, element;
    }, self.themes = ["default", "dark"], self.previewThemes = ["default", "dark"], self.editorThemes = ["default", "3024-day", "3024-night", "ambiance", "ambiance-mobile", "base16-dark", "base16-light", "blackboard", "cobalt", "eclipse", "elegant", "erlang-dark", "lesser-dark", "mbo", "mdn-like", "midnight", "monokai", "neat", "neo", "night", "paraiso-dark", "paraiso-light", "pastel-on-dark", "rubyblue", "solarized", "the-matrix", "tomorrow-night-eighties", "twilight", "vibrant-ink", "xq-dark", 
    "xq-light"], self.loadPlugins = {}, self.loadFiles = {
      js : [],
      css : [],
      plugin : []
    }, self.loadPlugin = function(filename, callback, opts) {
      callback = callback || function() {
      };
      this.loadScript(filename, function() {
        self.loadFiles.plugin.push(filename);
        callback();
      }, opts);
    }, self.loadCSS = function(url, callback, id) {
      id = id || "head";
      callback = callback || function() {
      };
      var node = document.createElement("link");
      node.type = "text/css";
      node.rel = "stylesheet";
      node.onload = node.onreadystatechange = function() {
        self.loadFiles.css.push(url);
        callback();
      };
      node.href = url + ".css";
      if ("head" === id) {
        document.getElementsByTagName("head")[0].appendChild(node);
      } else {
        document.body.appendChild(node);
      }
    }, self.isIE = "Microsoft Internet Explorer" === navigator.appName, self.isIE8 = self.isIE && "8." === navigator.appVersion.match(/8./i), self.loadScript = function(url, callback, id) {
      id = id || "head";
      callback = callback || function() {
      };
      var script = null;
      (script = document.createElement("script")).id = url.replace(/[\.\/]+/g, "-");
      script.type = "text/javascript";
      script.src = url + ".js";
      if (self.isIE8) {
        script.onreadystatechange = function() {
          if (script.readyState) {
            if (!("loaded" !== script.readyState && "complete" !== script.readyState)) {
              script.onreadystatechange = null;
              self.loadFiles.js.push(url);
              callback();
            }
          }
        };
      } else {
        script.onload = function() {
          self.loadFiles.js.push(url);
          callback();
        };
      }
      if ("head" === id) {
        document.getElementsByTagName("head")[0].appendChild(script);
      } else {
        document.body.appendChild(script);
      }
    }, self.katexURL = {
      css : "//cdnjs.cloudflare.com/ajax/libs/KaTeX/0.3.0/katex.min",
      js : "//cdnjs.cloudflare.com/ajax/libs/KaTeX/0.3.0/katex.min"
    }, self.kaTeXLoaded = false, self.loadKaTeX = function(itemWidgetToActive) {
      self.loadCSS(self.katexURL.css, function() {
        self.loadScript(self.katexURL.js, itemWidgetToActive || function() {
        });
      });
    }, self.lockScreen = function(on) {
      $("html,body").css("overflow", on ? "hidden" : "");
    }, self.createDialog = function(opts) {
      var defaults = {
        name : "",
        width : 420,
        height : 240,
        title : "",
        drag : true,
        closed : true,
        content : "",
        mask : true,
        maskStyle : {
          backgroundColor : "#fff",
          opacity : .1
        },
        lockScreen : true,
        footer : true,
        buttons : false
      };
      opts = $.extend(true, defaults, opts);
      var blurFBO = this;
      var editor = this.editor;
      var classPrefix = self.classPrefix;
      var pluginName = (new Date).getTime();
      var action = "" === opts.name ? classPrefix + "dialog-" + pluginName : opts.name;
      var addEventListener = self.mouseOrTouch;
      var html = '<div class="' + classPrefix + "dialog " + action + '">';
      if ("" !== opts.title) {
        html = html + ('<div class="' + classPrefix + 'dialog-header"' + (opts.drag ? ' style="cursor: move;"' : "") + ">");
        html = html + ('<strong class="' + classPrefix + 'dialog-title">' + opts.title + "</strong>");
        html = html + "</div>";
      }
      if (opts.closed) {
        html = html + ('<a href="javascript:;" class="fa fa-close ' + classPrefix + 'dialog-close"></a>');
      }
      html = html + ('<div class="' + classPrefix + 'dialog-container">' + opts.content);
      if (opts.footer || "string" == typeof opts.footer) {
        html = html + ('<div class="' + classPrefix + 'dialog-footer">' + ("boolean" == typeof opts.footer ? "" : opts.footer) + "</div>");
      }
      html = html + "</div>";
      html = html + ('<div class="' + classPrefix + "dialog-mask " + classPrefix + 'dialog-mask-bg"></div>');
      html = html + ('<div class="' + classPrefix + "dialog-mask " + classPrefix + 'dialog-mask-con"></div>');
      html = html + "</div>";
      editor.append(html);
      var obj = editor.find("." + action);
      obj.lockScreen = function(on) {
        return opts.lockScreen && ($("html,body").css("overflow", on ? "hidden" : ""), blurFBO.resize()), obj;
      };
      obj.showMask = function() {
        return opts.mask && editor.find("." + classPrefix + "mask").css(opts.maskStyle).css("z-index", self.dialogZindex - 1).show(), obj;
      };
      obj.hideMask = function() {
        return opts.mask && editor.find("." + classPrefix + "mask").hide(), obj;
      };
      obj.loading = function(state) {
        var loading;
        return obj.find("." + classPrefix + "dialog-mask")[state ? "show" : "hide"](), obj;
      };
      obj.lockScreen(true).showMask();
      obj.show().css({
        zIndex : self.dialogZindex,
        border : self.isIE8 ? "1px solid #ddd" : "",
        width : "number" == typeof opts.width ? opts.width + "px" : opts.width,
        height : "number" == typeof opts.height ? opts.height + "px" : opts.height
      });
      var resize = function() {
        obj.css({
          top : ($(window).height() - obj.height()) / 2 + "px",
          left : ($(window).width() - obj.width()) / 2 + "px"
        });
      };
      if (resize(), $(window).resize(resize), obj.children("." + classPrefix + "dialog-close").bind(addEventListener("click", "touchend"), function() {
        obj.hide().lockScreen(false).hideMask();
      }), "object" == typeof opts.buttons) {
        var jQScrollable = obj.footer = obj.find("." + classPrefix + "dialog-footer");
        var i;
        for (i in opts.buttons) {
          var object = opts.buttons[i];
          var paginateOfClassName = classPrefix + i + "-btn";
          jQScrollable.append('<button class="' + classPrefix + "btn " + paginateOfClassName + '">' + object[0] + "</button>");
          object[1] = $.proxy(object[1], obj);
          jQScrollable.children("." + paginateOfClassName).bind(addEventListener("click", "touchend"), object[1]);
        }
      }
      if ("" !== opts.title && opts.drag) {
        var off_x;
        var off_y;
        var container = obj.children("." + classPrefix + "dialog-header");
        if (!opts.mask) {
          container.bind(addEventListener("click", "touchend"), function() {
            self.dialogZindex += 2;
            obj.css("z-index", self.dialogZindex);
          });
        }
        var on = function(callback) {
          callback.removeClass(classPrefix + "user-unselect").off("selectstart");
        };
        var show = function($tooltip) {
          $tooltip.addClass(classPrefix + "user-unselect").on("selectstart", function(event) {
            return false;
          });
        };
        var start = function(event) {
          event = event || window.event;
          var targetL;
          var y_body_bottom;
          var whiteRating = parseInt(obj[0].style.left);
          var pageInd = parseInt(obj[0].style.top);
          if (whiteRating >= 0) {
            if (whiteRating + obj.width() <= $(window).width()) {
              targetL = event.clientX - off_x;
            } else {
              targetL = $(window).width() - obj.width();
              document.onmousemove = null;
            }
          } else {
            targetL = 0;
            document.onmousemove = null;
          }
          if (pageInd >= 0) {
            y_body_bottom = event.clientY - off_y;
          } else {
            y_body_bottom = 0;
            document.onmousemove = null;
          }
          document.onselectstart = function() {
            return false;
          };
          show($("body"));
          show(obj);
          obj[0].style.left = targetL + "px";
          obj[0].style.top = y_body_bottom + "px";
        };
        container.mousedown(function(event) {
          event = event || window.event;
          off_x = event.clientX - parseInt(obj[0].style.left);
          off_y = event.clientY - parseInt(obj[0].style.top);
          document.onmousemove = start;
        });
        document.onmouseup = function() {
          on($("body"));
          on(obj);
          document.onselectstart = null;
          document.onmousemove = null;
        };
        container.touchDraggable = function() {
          var tclick = null;
          var func = function(event) {
            var evt = event.originalEvent;
            var stop_offset = $(this).parent().position();
            tclick = {
              x : evt.changedTouches[0].pageX - stop_offset.left,
              y : evt.changedTouches[0].pageY - stop_offset.top
            };
          };
          var move = function(event) {
            event.preventDefault();
            var evt = event.originalEvent;
            $(this).parent().css({
              top : evt.changedTouches[0].pageY - tclick.y,
              left : evt.changedTouches[0].pageX - tclick.x
            });
          };
          this.bind("touchstart", func).bind("touchmove", move);
        };
        container.touchDraggable();
      }
      return self.dialogZindex += 2, obj;
    }, self.mouseOrTouch = function(type, binding) {
      binding = binding || "touchend";
      var currentBinding = type = type || "click";
      try {
        document.createEvent("TouchEvent");
        currentBinding = binding;
      } catch (e) {
      }
      return currentBinding;
    }, self.dateFormat = function(pattern) {
      pattern = pattern || "";
      var pad = function(n) {
        return n < 10 ? "0" + n : n;
      };
      var now = new Date;
      var prefix = now.getFullYear();
      var s = prefix.toString().slice(2, 4);
      var m = pad(now.getMonth() + 1);
      var i = pad(now.getDate());
      var num = now.getDay();
      var h = pad(now.getHours());
      var min = pad(now.getMinutes());
      var instance = pad(now.getSeconds());
      var str = pad(now.getMilliseconds());
      var ret = "";
      var d = s + "-" + m + "-" + i;
      var url = prefix + "-" + m + "-" + i;
      var id = h + ":" + min + ":" + instance;
      switch(pattern) {
        case "UNIX Time":
          ret = now.getTime();
          break;
        case "UTC":
          ret = now.toUTCString();
          break;
        case "yy":
          ret = s;
          break;
        case "year":
        case "yyyy":
          ret = prefix;
          break;
        case "month":
        case "mm":
          ret = m;
          break;
        case "cn-week-day":
        case "cn-wd":
          var cnWeekDays;
          ret = "\u661f\u671f" + ["\u65e5", "\u4e00", "\u4e8c", "\u4e09", "\u56db", "\u4e94", "\u516d"][num];
          break;
        case "week-day":
        case "wd":
          var weekDays;
          ret = ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"][num];
          break;
        case "day":
        case "dd":
          ret = i;
          break;
        case "hour":
        case "hh":
          ret = h;
          break;
        case "min":
        case "ii":
          ret = min;
          break;
        case "second":
        case "ss":
          ret = instance;
          break;
        case "ms":
          ret = str;
          break;
        case "yy-mm-dd":
          ret = d;
          break;
        case "yyyy-mm-dd":
          ret = url;
          break;
        case "yyyy-mm-dd h:i:s ms":
        case "full + ms":
          ret = url + " " + id + " " + str;
          break;
        case "full":
        case "yyyy-mm-dd h:i:s":
          break;
        default:
          ret = url + " " + id;
      }
      return ret;
    }, self;
  }
});
